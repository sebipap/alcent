// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// fincance accounts can either be assets, liabilities, income or expenses

model FinanceAccount {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  User        User          @relation(fields: [userId], references: [id])
  entityId    String
  Entity      Entity        @relation(fields: [entityId], references: [id])
  unitId      String
  Unit        Unit          @relation(fields: [unitId], references: [id])
  type        String        @default("asset")
  Transaction Transaction[]

  @@index([unitId])
  @@index([userId])
  @@index([entityId])
}

// Examples: Bank of America, my wallet, my friend John, 
model Entity {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  color          String           @default("#000000")
  FinanceAccount FinanceAccount[]
}

// Examples: USD, EUR, BTC, ETH, my car
model Unit {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  FinanceAccount FinanceAccount[]
}

model Transaction {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String
  amount           Float
  date             DateTime
  userId           String
  financeAccountId String
  FinanceAccount   FinanceAccount @relation(fields: [userId], references: [id])
  User             User           @relation(fields: [financeAccountId], references: [id])

  @@index([userId])
  @@index([financeAccountId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  currency          String  @default("USD")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  FinanceAccount FinanceAccount[]
  Transaction    Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
